// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using pleaseoftheloveofgodbethelastversionofthisproject.Models;

namespace pleaseoftheloveofgodbethelastversionofthisproject.Migrations
{
    [DbContext(typeof(CCIPContext))]
    partial class CCIPContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("pleaseoftheloveofgodbethelastversionofthisproject.Models.AspNetRoleClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("pleaseoftheloveofgodbethelastversionofthisproject.Models.AspNetRoles", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("([NormalizedName] IS NOT NULL)");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("pleaseoftheloveofgodbethelastversionofthisproject.Models.AspNetUserClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("pleaseoftheloveofgodbethelastversionofthisproject.Models.AspNetUserLogins", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("pleaseoftheloveofgodbethelastversionofthisproject.Models.AspNetUserRoles", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("pleaseoftheloveofgodbethelastversionofthisproject.Models.AspNetUserTokens", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("pleaseoftheloveofgodbethelastversionofthisproject.Models.AspNetUsers", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConnectedTeacherId")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<int>("CorrectAnswers")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("ExperienceTotal")
                        .HasColumnName("experienceTotal")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionsAttempted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("([NormalizedUserName] IS NOT NULL)");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("pleaseoftheloveofgodbethelastversionofthisproject.Models.QuestionType", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("typeId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("QuestionType1")
                        .IsRequired()
                        .HasColumnName("questionType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TypeId")
                        .HasName("PK__question__F04DF13A498E6817");

                    b.ToTable("questionType");
                });

            modelBuilder.Entity("pleaseoftheloveofgodbethelastversionofthisproject.Models.UserContent", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("postId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnswerContent")
                        .IsRequired()
                        .HasColumnName("answerContent")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("Dislikes")
                        .HasColumnName("dislikes")
                        .HasColumnType("int");

                    b.Property<int>("Flags")
                        .HasColumnName("flags")
                        .HasColumnType("int");

                    b.Property<int>("Likes")
                        .HasColumnName("likes")
                        .HasColumnType("int");

                    b.Property<string>("QuestionContent")
                        .IsRequired()
                        .HasColumnName("questionContent")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("QuestionType")
                        .HasColumnName("questionType")
                        .HasColumnType("int");

                    b.Property<bool>("Shadowed")
                        .HasColumnName("shadowed")
                        .HasColumnType("bit");

                    b.Property<string>("UserRef")
                        .IsRequired()
                        .HasColumnName("userRef")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.HasKey("PostId")
                        .HasName("PK__userCont__DD0C739AAFAE5F63");

                    b.HasIndex("QuestionType");

                    b.HasIndex("UserRef");

                    b.ToTable("userContent");
                });

            modelBuilder.Entity("pleaseoftheloveofgodbethelastversionofthisproject.Models.UserSessionTracker", b =>
                {
                    b.Property<int>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("sessionId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CorrectAnswerCount")
                        .HasColumnName("correctAnswerCount")
                        .HasColumnType("int");

                    b.Property<int>("CurrentQuestion")
                        .HasColumnName("currentQuestion")
                        .HasColumnType("int");

                    b.Property<string>("QueryCriteria")
                        .IsRequired()
                        .HasColumnName("queryCriteria")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<int>("QuestionCount")
                        .HasColumnName("questionCount")
                        .HasColumnType("int");

                    b.Property<int>("QuestionType")
                        .HasColumnName("questionType")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnName("userId")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.HasKey("SessionId")
                        .HasName("PK__userSess__23DB122BFA942296");

                    b.HasIndex("QuestionType");

                    b.ToTable("userSessionTracker");
                });

            modelBuilder.Entity("pleaseoftheloveofgodbethelastversionofthisproject.Models.AspNetRoleClaims", b =>
                {
                    b.HasOne("pleaseoftheloveofgodbethelastversionofthisproject.Models.AspNetRoles", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("pleaseoftheloveofgodbethelastversionofthisproject.Models.AspNetUserRoles", b =>
                {
                    b.HasOne("pleaseoftheloveofgodbethelastversionofthisproject.Models.AspNetRoles", "Role")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("pleaseoftheloveofgodbethelastversionofthisproject.Models.UserContent", b =>
                {
                    b.HasOne("pleaseoftheloveofgodbethelastversionofthisproject.Models.QuestionType", "QuestionTypeNavigation")
                        .WithMany("UserContent")
                        .HasForeignKey("QuestionType")
                        .HasConstraintName("FK_questionType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pleaseoftheloveofgodbethelastversionofthisproject.Models.AspNetUsers", "UserRefNavigation")
                        .WithMany("UserContent")
                        .HasForeignKey("UserRef")
                        .HasConstraintName("FK_userReftoId")
                        .IsRequired();
                });

            modelBuilder.Entity("pleaseoftheloveofgodbethelastversionofthisproject.Models.UserSessionTracker", b =>
                {
                    b.HasOne("pleaseoftheloveofgodbethelastversionofthisproject.Models.QuestionType", "QuestionTypeNavigation")
                        .WithMany("UserSessionTracker")
                        .HasForeignKey("QuestionType")
                        .HasConstraintName("FK_toQuestionType")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
